import { ProductCard } from '@/components/product/ProductCard';
import { ThemedText } from '@/components/ThemedText';
import { ThemedView } from '@/components/ThemedView';
import { Colors } from '@/constants/Colors';
import { useColorScheme } from '@/hooks/useColorScheme';
import ProductService, { Product, ProductFilter } from '@/services/product.service';
import { Ionicons } from '@expo/vector-icons';
import * as Haptics from 'expo-haptics';
import { Stack, useLocalSearchParams } from 'expo-router';
import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';
import {
  ActivityIndicator,
  Alert,
  Animated,
  Dimensions,
  FlatList,
  RefreshControl,
  StyleSheet,
  TextInput,
  TouchableOpacity,
  View
} from 'react-native';



// Constants
const CATEGORIES = [
  'All',
  'Fruits',
  'Vegetables',
  'Dairy',
  'Bakery',
  'Beverages',
  'Snacks',
  'Meat & Seafood',
  'Frozen Foods',
  'Personal Care',
] as const;

const SORT_OPTIONS = [
  { label: 'Relevance', value: 'relevance' as const },
  { label: 'Price: Low to High', value: 'price_asc' as const },
  { label: 'Price: High to Low', value: 'price_desc' as const },
  { label: 'Name: A to Z', value: 'name_asc' as const },
  { label: 'Name: Z to A', value: 'name_desc' as const },
  { label: 'Newest First', value: 'newest' as const },
  { label: 'Rating: High to Low', value: 'rating_desc' as const },
] as const;

const PRICE_RANGES = [
  { label: 'All Prices', min: undefined, max: undefined },
  { label: 'Under ₹50', min: 0, max: 50 },
  { label: '₹50 - ₹100', min: 50, max: 100 },
  { label: '₹100 - ₹200', min: 100, max: 200 },
  { label: '₹200 - ₹500', min: 200, max: 500 },
  { label: 'Above ₹500', min: 500, max: undefined },
] as const;

// Types
type SortValue = typeof SORT_OPTIONS[number]['value'];
type CategoryValue = typeof CATEGORIES[number];

interface ProductsState {
  products: Product[];
  isLoading: boolean;
  isRefreshing: boolean;
  error: string | null;
  hasMore: boolean;
  page: number;
}

interface FiltersState {
  searchQuery: string;
  selectedCategory: CategoryValue;
  selectedSort: SortValue;
  priceRange: { min?: number; max?: number };
  showFilters: boolean;
  inStockOnly: boolean;
}

const { width } = Dimensions.get('window');
const ITEM_WIDTH = (width - 48) / 2;

export default function ProductsScreen() {
  const params = useLocalSearchParams();
  const colorScheme = useColorScheme();
  const colors = Colors[colorScheme ?? 'light'];
  
  // Refs
  const searchTimeoutRef = useRef<NodeJS.Timeout>();
  const flatListRef = useRef<FlatList>(null);
  const filterAnimationRef = useRef(new Animated.Value(0)).current;
  
  // State
  const [productsState, setProductsState] = useState<ProductsState>({
    products: [],
    isLoading: true,
    isRefreshing: false,
    error: null,
    hasMore: false,
    page: 1,
  });

  const [filtersState, setFiltersState] = useState<FiltersState>({
    searchQuery: (params.search as string) || '',
    selectedCategory: (params.category as CategoryValue) || 'All',
    selectedSort: 'relevance',
    priceRange: { min: undefined, max: undefined },
    showFilters: false,
    inStockOnly: false,
  });

  // Memoized filter function for performance
  const applyFilters = useCallback((products: Product[], filters: FiltersState): Product[] => {
    let filtered = [...products];

    // Search filter
    if (filters.searchQuery.trim()) {
      const query = filters.searchQuery.toLowerCase().trim();
      filtered = filtered.filter(product =>
        product.name.toLowerCase().includes(query) ||
        product.description.toLowerCase().includes(query) ||
        product.category.toLowerCase().includes(query) ||
        product.brand?.toLowerCase().includes(query)
      );
    }

    // Category filter
    if (filters.selectedCategory !== 'All') {
      filtered = filtered.filter(product => 
        product.category === filters.selectedCategory
      );
    }

    // Price range filter
    if (filters.priceRange.min !== undefined || filters.priceRange.max !== undefined) {
      filtered = filtered.filter(product => {
        const price = product.discountedPrice || product.price;
        const minCheck = filters.priceRange.min === undefined || price >= filters.priceRange.min;
        const maxCheck = filters.priceRange.max === undefined || price <= filters.priceRange.max;
        return minCheck && maxCheck;
      });
    }

    // Stock filter
    if (filters.inStockOnly) {
      filtered = filtered.filter(product => product.stockStatus !== 'out_of_stock');
    }

    // Sorting
    filtered.sort((a, b) => {
      switch (filters.selectedSort) {
        case 'price_asc':
          return (a.discountedPrice || a.price) - (b.discountedPrice || b.price);
        case 'price_desc':
          return (b.discountedPrice || b.price) - (a.discountedPrice || a.price);
        case 'name_asc':
          return a.name.localeCompare(b.name);
        case 'name_desc':
          return b.name.localeCompare(a.name);
        case 'rating_desc':
          return b.rating - a.rating;
        case 'newest':
          return new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime();
        default:
          return 0;
      }
    });

    return filtered;
  }, []);

  // Memoized filtered products
  const filteredProducts = useMemo(() => 
    applyFilters(productsState.products, filtersState),
    [productsState.products, filtersState, applyFilters]
  );

  // Load products function
  const loadProducts = useCallback(async (refresh = false) => {
    try {
      if (refresh) {
        setProductsState(prev => ({ ...prev, isRefreshing: true, error: null }));
      } else {
        setProductsState(prev => ({ ...prev, isLoading: true, error: null }));
      }

      const filters: ProductFilter = {
        limit: 20,
        offset: refresh ? 0 : (productsState.page - 1) * 20,
      };

      // Add city filter if available
      if (params.city) {
        filters.city = params.city as string;
      }

      const result = await ProductService.getAllProducts(filters);
      
      setProductsState(prev => ({
        ...prev,
        products: refresh ? result.products : [...prev.products, ...result.products],
        isLoading: false,
        isRefreshing: false,
        hasMore: result.hasMore,
        page: refresh ? 2 : prev.page + 1,
        error: null,
      }));

    } catch (error: any) {
      console.error('Error loading products:', error);
      setProductsState(prev => ({
        ...prev,
        isLoading: false,
        isRefreshing: false,
        error: error.message || 'Failed to load products',
      }));

      if (!refresh) {
        Alert.alert(
          'Error',
          'Failed to load products. Please check your internet connection and try again.',
          [{ text: 'OK' }]
        );
      }
    }
  }, [params.city, productsState.page]);

  useEffect(() => {
    loadProducts();
  }, [loadProducts]);

  useEffect(() => {
    // Apply sorting to products
    let sorted = [...products];
    
    switch (selectedSort) {
      case 'price_asc':
        sorted.sort((a, b) => (a.discountedPrice || a.price) - (b.discountedPrice || b.price));
        break;
      case 'price_desc':
        sorted.sort((a, b) => (b.discountedPrice || b.price) - (a.discountedPrice || a.price));
        break;
      case 'name_asc':
        sorted.sort((a, b) => a.name.localeCompare(b.name));
        break;
      case 'name_desc':
        sorted.sort((a, b) => b.name.localeCompare(a.name));
        break;
      case 'newest':
        sorted.sort((a, b) => b.id - a.id);
        break;
      default:
        // Keep original order for relevance
        break;
    }
    
    setFilteredProducts(sorted);
  }, [products, selectedSort]);

  const handleRefresh = useCallback(() => {
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    loadProducts(true);
  }, [loadProducts]);

  const handleSearch = () => {
    if (searchQuery.trim()) {
      Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
      loadProducts();
    }
  };

  const handleCategorySelect = (category: string) => {
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    setSelectedCategory(category);
  };

  const handleSortSelect = (sortValue: string) => {
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
    setSelectedSort(sortValue);
  };

  const clearFilters = () => {
    setSearchQuery('');
    setSelectedCategory('All');
    setSelectedSort('relevance');
    setPriceRange({ min: '', max: '' });
    setShowFilters(false);
  };

  const applyFilters = () => {
    setShowFilters(false);
    loadProducts();
  };

  const renderProductItem = ({ item, index }: { item: Product; index: number }) => (
    <View style={[styles.productWrapper, index % 2 === 1 && styles.productWrapperRight]}>
      <ProductCard product={item} />
    </View>
  );

  const renderCategoryItem = ({ item }: { item: string }) => (
    <TouchableOpacity
      style={[
        styles.categoryChip,
        selectedCategory === item && { backgroundColor: colors.tint },
        { borderColor: colors.border }
      ]}
      onPress={() => handleCategorySelect(item)}
    >
      <ThemedText
        style={[
          styles.categoryText,
          selectedCategory === item && { color: '#FFFFFF' }
        ]}
      >
        {item}
      </ThemedText>
    </TouchableOpacity>
  );

  const renderSortItem = ({ item }: { item: typeof SORT_OPTIONS[0] }) => (
    <TouchableOpacity
      style={[
        styles.sortItem,
        selectedSort === item.value && { backgroundColor: colors.tint + '20' }
      ]}
      onPress={() => handleSortSelect(item.value)}
    >
      <ThemedText
        style={[
          styles.sortText,
          selectedSort === item.value && { color: colors.tint, fontWeight: '600' }
        ]}
      >
        {item.label}
      </ThemedText>
      {selectedSort === item.value && (
        <Ionicons name="checkmark" size={20} color={colors.tint} />
      )}
    </TouchableOpacity>
  );

  const renderEmptyState = () => (
    <View style={styles.emptyState}>
      <Ionicons name="search-outline" size={64} color={colors.tabIconDefault} />
      <ThemedText style={[styles.emptyStateTitle, { color: colors.text }]}>
        No products found
      </ThemedText>
      <ThemedText style={[styles.emptyStateText, { color: colors.tabIconDefault }]}>
        {searchQuery ? 
          `No products match "${searchQuery}"` : 
          'No products available at the moment'
        }
      </ThemedText>
      <TouchableOpacity 
        style={[styles.retryButton, { backgroundColor: colors.tint }]}
        onPress={() => loadProducts()}
      >
        <ThemedText style={styles.retryButtonText}>Try Again</ThemedText>
      </TouchableOpacity>
    </View>
  );

  return (
    <ThemedView style={styles.container}>
      <Stack.Screen 
        options={{ 
          title: 'Products',
          headerRight: () => (
            <TouchableOpacity 
              style={styles.filterButton}
              onPress={() => setShowFilters(!showFilters)}
            >
              <Ionicons 
                name={showFilters ? "close" : "options-outline"} 
                size={24} 
                color={colors.text} 
              />
            </TouchableOpacity>
          )
        }} 
      />

      {/* Search Bar */}
      <View style={[styles.searchContainer, { backgroundColor: colors.cardBackground }]}>
        <Ionicons name="search" size={20} color={colors.tabIconDefault} />
        <TextInput
          style={[styles.searchInput, { color: colors.text }]}
          placeholder="Search products..."
          placeholderTextColor={colors.tabIconDefault}
          value={searchQuery}
          onChangeText={setSearchQuery}
          onSubmitEditing={handleSearch}
          returnKeyType="search"
        />
        {searchQuery ? (
          <TouchableOpacity onPress={() => setSearchQuery('')}>
            <Ionicons name="close-circle" size={20} color={colors.tabIconDefault} />
          </TouchableOpacity>
        ) : null}
      </View>

      {/* Filters Panel */}
      {showFilters && (
        <View style={[styles.filtersPanel, { backgroundColor: colors.cardBackground }]}>
          {/* Categories */}
          <View style={styles.filterSection}>
            <ThemedText style={styles.filterTitle}>Categories</ThemedText>
            <FlatList
              data={CATEGORIES}
              renderItem={renderCategoryItem}
              keyExtractor={(item) => item}
              horizontal
              showsHorizontalScrollIndicator={false}
              contentContainerStyle={styles.categoriesList}
            />
          </View>

          {/* Price Range */}
          <View style={styles.filterSection}>
            <ThemedText style={styles.filterTitle}>Price Range</ThemedText>
            <View style={styles.priceRangeContainer}>
              <TextInput
                style={[styles.priceInput, { backgroundColor: colors.background, color: colors.text }]}
                placeholder="Min"
                placeholderTextColor={colors.tabIconDefault}
                value={priceRange.min}
                onChangeText={(text) => setPriceRange({ ...priceRange, min: text })}
                keyboardType="numeric"
              />
              <ThemedText style={styles.priceSeparator}>to</ThemedText>
              <TextInput
                style={[styles.priceInput, { backgroundColor: colors.background, color: colors.text }]}
                placeholder="Max"
                placeholderTextColor={colors.tabIconDefault}
                value={priceRange.max}
                onChangeText={(text) => setPriceRange({ ...priceRange, max: text })}
                keyboardType="numeric"
              />
            </View>
          </View>

          {/* Sort Options */}
          <View style={styles.filterSection}>
            <ThemedText style={styles.filterTitle}>Sort By</ThemedText>
            <FlatList
              data={SORT_OPTIONS}
              renderItem={renderSortItem}
              keyExtractor={(item) => item.value}
              scrollEnabled={false}
            />
          </View>

          {/* Filter Actions */}
          <View style={styles.filterActions}>
            <TouchableOpacity
              style={[styles.filterActionButton, { backgroundColor: colors.border }]}
              onPress={clearFilters}
            >
              <ThemedText style={styles.filterActionText}>Clear</ThemedText>
            </TouchableOpacity>
            <TouchableOpacity
              style={[styles.filterActionButton, { backgroundColor: colors.tint }]}
              onPress={applyFilters}
            >
              <ThemedText style={[styles.filterActionText, { color: '#FFFFFF' }]}>Apply</ThemedText>
            </TouchableOpacity>
          </View>
        </View>
      )}

      {/* Results Info */}
      <View style={styles.resultsInfo}>
        <ThemedText style={styles.resultsText}>
          {filteredProducts.length} product{filteredProducts.length !== 1 ? 's' : ''} found
        </ThemedText>
      </View>

      {/* Products List */}
      {isLoading ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color={colors.tint} />
          <ThemedText style={styles.loadingText}>Loading products...</ThemedText>
        </View>
      ) : (
        <FlatList
          data={filteredProducts}
          renderItem={renderProductItem}
          keyExtractor={(item) => item.id.toString()}
          numColumns={2}
          contentContainerStyle={styles.productsList}
          showsVerticalScrollIndicator={false}
          refreshControl={
            <RefreshControl
              refreshing={isRefreshing}
              onRefresh={handleRefresh}
              colors={[colors.tint]}
              tintColor={colors.tint}
            />
          }
          ListEmptyComponent={renderEmptyState}
        />
      )}
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  filterButton: {
    padding: 8,
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 16,
    paddingVertical: 12,
    margin: 16,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  searchInput: {
    flex: 1,
    marginLeft: 8,
    fontSize: 16,
  },
  filtersPanel: {
    padding: 16,
    marginHorizontal: 16,
    marginBottom: 16,
    borderRadius: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  filterSection: {
    marginBottom: 20,
  },
  filterTitle: {
    fontSize: 16,
    fontWeight: '600',
    marginBottom: 12,
  },
  categoriesList: {
    paddingVertical: 4,
  },
  categoryChip: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    borderWidth: 1,
    marginRight: 8,
  },
  categoryText: {
    fontSize: 14,
    fontWeight: '500',
  },
  priceRangeContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  priceInput: {
    flex: 1,
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 8,
    fontSize: 16,
  },
  priceSeparator: {
    marginHorizontal: 12,
    fontSize: 16,
  },
  sortItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderRadius: 8,
    marginBottom: 4,
  },
  sortText: {
    fontSize: 16,
  },
  filterActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 8,
  },
  filterActionButton: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
    marginHorizontal: 4,
  },
  filterActionText: {
    fontSize: 16,
    fontWeight: '600',
  },
  resultsInfo: {
    paddingHorizontal: 16,
    paddingBottom: 8,
  },
  resultsText: {
    fontSize: 14,
    opacity: 0.7,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  loadingText: {
    marginTop: 16,
    fontSize: 16,
    opacity: 0.7,
  },
  productsList: {
    padding: 16,
  },
  productWrapper: {
    flex: 1,
    marginBottom: 16,
  },
  productWrapperRight: {
    marginLeft: 8,
  },
  emptyContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 60,
  },
  emptyText: {
    fontSize: 18,
    fontWeight: '600',
    marginTop: 16,
    textAlign: 'center',
  },
  emptySubtext: {
    fontSize: 14,
    opacity: 0.7,
    marginTop: 8,
    textAlign: 'center',
    marginBottom: 24,
  },
  clearFiltersButton: {
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  clearFiltersText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
  emptyState: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: 32,
    paddingVertical: 64,
  },
  emptyStateTitle: {
    fontSize: 20,
    fontWeight: '600',
    marginTop: 16,
    marginBottom: 8,
  },
  emptyStateText: {
    fontSize: 16,
    textAlign: 'center',
    marginBottom: 24,
    lineHeight: 24,
  },
  retryButton: {
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 8,
  },
  retryButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
});